#!/usr/bin/env goal

/ utilities
hasArg:{|/(x~)'y}
sep:{[s;x;y]x+s+y}    / separate x and y by s
(nl;sp):sep'"\n" " "  / join by delims

/ cmdline args
A:1_ARGS
RELEASE:hasArg["--release"] A

/ find all cpp files in a list
cpp:{x@&{".cpp"~+/|4#|("c"$)'"c"$x}'x}

/ get the relevant filenames
fs:{d["name"]@&~(d:read x)"dir"}
(libF;srcF):"lib" "src"
(lib;src):cpp'fs'(libF;srcF)

/ target
name:"SCDB"
(exe;ar):(name+)'".com" ".a"
dae:name+"d.com"

/ all source filenames
SRC:cpp'src,lib
WARNINGS:sp/("-pedantic -Wextra -Wall -Wno-c99-extensions -Wno-unused-variable"
             "-Wno-unused-parameter -Wno-empty-body")
/ c++ flags
CXXFLAGS:"-mclang -O2 -std=c++26 -Iinc"
/ release flags
RELFLAGS:sp/"-O3"

/ make build.ninja
obj:{"o/"+x+".o"}
objs:{sp/obj'x}
bldObjs:{[d;p]nl/{[p;x]"build "+obj[x]+": cpp $p/$x"}[p]'d}
say'("cxx = ape/bin/cosmoc++"
     "lnk = ape/bin/apelink"
     "cxxflags = $CXXFLAGS $WARNINGS "+?[RELEASE;RELFLAGS;"-g"]
     rq/rule cpp
          depfile = $out.d
          command = $cxx -c -MD -MF $out.d $cxxflags -fblocks -o $out $in/
     rq/rule lib
          command = cosmoar rcs $out $in/
     rq|rule lnk
          command = $cxx -o $out $in|
     rq/rule mkdir
          command = mkdir -p $out/
     rq/rule rm
          command = rm -rf $in/
     rq/rule exe
          command = $in/
     "build clean: rm o"
     "build run: exe o/$exe"
     "build o: mkdir"
     bldObjs[src;srcF]; bldObjs[lib;libF]
     "build o/$ar: lib "+objs lib
     "build o/$exe: lnk o/0.cpp.o o/$ar"
     "build o/$dae: lnk o/D.cpp.o o/$ar"
     "default o/$exe o/$dae")
